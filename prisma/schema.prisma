// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.VarChar()
  access_token      String?  @db.VarChar()
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.VarChar()
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model Organization {
  id            String       @id @default(uuid())
  name          String
  description   String
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @default(now()) @map(name: "updated_at")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @default(now()) @map(name: "updated_at")
  purchases     Purchase[]
  accounts      Account[]
  sessions      Session[]
  waivers       Waiver[]
  role          Role         @default(GUEST)


  usersReferred User[] @relation("ReferrerToUser")

  referredByUserId String?
  referredByUser   User?   @relation("ReferrerToUser", fields: [referredByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  credits                   Int @default(4)
  feedbackCreditsGranted    Int @default(0)
  creditsEarnedViaReferrals Int @default(0)

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@index([referredByUserId])
  @@map(name: "users")
}

model Waiver {
  id          Int    @id @default(autoincrement())
  userId      String
  signature   String
  waiverPdf   String
  user        User   @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN //Can manage orgs
  ORGS  // Organization collecting the waivers
  USER  // User who signs the waiver to the org.
  GUEST // Not logged in, viewing the marketing page.
}

model Purchase {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditAmount Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
