generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.VarChar()
  access_token      String?  @db.VarChar()
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.VarChar()
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model Location {
  id        String   @id @default(uuid())
  name      String
  address   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  orgId     String
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @default(now()) @map(name: "updated_at")
  purchases     Purchase[]
  accounts      Account[]
  sessions      Session[]
  role          Role       @default(User)


  stripePlanId           String?   @map(name: "stripe_plan_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeProductId        String?   @map(name: "stripe_product_id")

  @@map(name: "users")
}

enum Role {
  User
  Guest
  Signer
  Admin
  Org
}

model SignedWaiver {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  expirationDate DateTime
  signatureImage String
  orgId          Int
  org            Organization @relation(fields: [orgId], references: [id])
  // other fields go here...

  @@index([orgId], name: "orgId_idx")
}

model Organization {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  SignedWaiver   SignedWaiver[]
  // other fields go here...
  // WaiverTemplate WaiverTemplate[]
}


model WaiverTemplate {
  id           Int            @id @default(autoincrement())
  orgId        Int
  waiverText   String         @default("testing default through prisma")
  status       TemplateStatus @default(Draft)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum TemplateStatus {
  Draft
  Published
}

model Purchase {
  id           String   @id @default(cuid())
  userId       String
  orgId        String
  user         User     @relation(fields: [userId], references: [id])
  creditAmount Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
